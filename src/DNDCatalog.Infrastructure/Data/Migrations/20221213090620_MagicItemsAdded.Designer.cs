// <auto-generated />
using System;
using DNDCatalog.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DNDCatalog.Infrastructure.data.migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20221213090620_MagicItemsAdded")]
    partial class MagicItemsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArchetypeSpell", b =>
                {
                    b.Property<Guid>("ArchetypesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpellsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArchetypesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("ArchetypeSpell");
                });

            modelBuilder.Entity("ClassSpell", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpellsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassesId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("ClassSpell");
                });

            modelBuilder.Entity("DNDCatalog.Core.ClassAggregate.Archetype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Archetypes");
                });

            modelBuilder.Entity("DNDCatalog.Core.ClassAggregate.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DNDCatalog.Core.HashtagAggregate.Hashtag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("DNDCatalog.Core.MagicItemAggregate.MagicItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attunement")
                        .HasColumnType("bit");

                    b.Property<bool>("Charged")
                        .HasColumnType("bit");

                    b.Property<bool>("Consumable")
                        .HasColumnType("bit");

                    b.Property<string>("DescriptionRus1")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionRus2")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa1")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa2")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MagicBonus")
                        .HasColumnType("int");

                    b.Property<string>("NameEng")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameUa")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MagicItems");
                });

            modelBuilder.Entity("DNDCatalog.Core.SpellAggregate.Spell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Attack")
                        .HasColumnType("int");

                    b.Property<bool>("ComponentM")
                        .HasColumnType("bit");

                    b.Property<string>("ComponentMDescription")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("ComponentS")
                        .HasColumnType("bit");

                    b.Property<bool>("ComponentV")
                        .HasColumnType("bit");

                    b.Property<bool>("Concentration")
                        .HasColumnType("bit");

                    b.Property<int?>("DamageType")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionEng")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionRu1")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionRu2")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa1")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa2")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionUa3")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EffectType")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NameEng")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameRus")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameUa")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Ritual")
                        .HasColumnType("bit");

                    b.Property<int?>("SaveReqired")
                        .HasColumnType("int");

                    b.Property<int?>("School")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DNDCatalog.Core.SpellAggregate.SpellTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SpellTags");
                });

            modelBuilder.Entity("HashtagMagicItem", b =>
                {
                    b.Property<Guid>("HashtagsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MagicItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HashtagsId", "MagicItemsId");

                    b.HasIndex("MagicItemsId");

                    b.ToTable("HashtagMagicItem");
                });

            modelBuilder.Entity("SpellSpellTag", b =>
                {
                    b.Property<Guid>("SpellsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpellsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("SpellSpellTag");
                });

            modelBuilder.Entity("ArchetypeSpell", b =>
                {
                    b.HasOne("DNDCatalog.Core.ClassAggregate.Archetype", null)
                        .WithMany()
                        .HasForeignKey("ArchetypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNDCatalog.Core.SpellAggregate.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassSpell", b =>
                {
                    b.HasOne("DNDCatalog.Core.ClassAggregate.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNDCatalog.Core.SpellAggregate.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DNDCatalog.Core.ClassAggregate.Archetype", b =>
                {
                    b.HasOne("DNDCatalog.Core.ClassAggregate.Class", "Class")
                        .WithMany("Archetypes")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("DNDCatalog.Core.MagicItemAggregate.MagicItem", b =>
                {
                    b.OwnsOne("DNDCatalog.Core.MagicItemAggregate.RecomendedPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("MagicItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Formula")
                                .HasMaxLength(50)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int?>("MaxPrice")
                                .HasColumnType("int");

                            b1.Property<int?>("MinPrice")
                                .HasColumnType("int");

                            b1.Property<string>("Notes")
                                .HasMaxLength(200)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("MagicItemId");

                            b1.ToTable("MagicItems");

                            b1.WithOwner()
                                .HasForeignKey("MagicItemId");
                        });

                    b.Navigation("Price");
                });

            modelBuilder.Entity("DNDCatalog.Core.SpellAggregate.Spell", b =>
                {
                    b.OwnsOne("DNDCatalog.Core.SpellAggregate.ActionDuration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("SpellId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Time")
                                .HasColumnType("varchar(15)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("SpellId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellId");
                        });

                    b.OwnsOne("DNDCatalog.Core.SpellAggregate.CastingTime", "CastingTime", b1 =>
                        {
                            b1.Property<Guid>("SpellId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsAction")
                                .HasColumnType("bit");

                            b1.Property<string>("Time")
                                .HasColumnType("varchar(15)");

                            b1.HasKey("SpellId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellId");

                            b1.OwnsOne("DNDCatalog.Core.BaseEntities.ActionTime", "ActionTime", b2 =>
                                {
                                    b2.Property<Guid>("CastingTimeSpellId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("ActionType")
                                        .HasColumnType("int");

                                    b2.Property<int>("Count")
                                        .HasColumnType("int");

                                    b2.HasKey("CastingTimeSpellId");

                                    b2.ToTable("Spells");

                                    b2.WithOwner()
                                        .HasForeignKey("CastingTimeSpellId");
                                });

                            b1.Navigation("ActionTime");
                        });

                    b.OwnsOne("DNDCatalog.Core.SpellAggregate.SpellRange", "Range", b1 =>
                        {
                            b1.Property<Guid>("SpellId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Area")
                                .HasColumnType("int");

                            b1.Property<int?>("Distance")
                                .HasColumnType("int");

                            b1.Property<int?>("Shape")
                                .HasColumnType("int");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("SpellId");

                            b1.ToTable("Spells");

                            b1.WithOwner()
                                .HasForeignKey("SpellId");
                        });

                    b.Navigation("CastingTime");

                    b.Navigation("Duration");

                    b.Navigation("Range");
                });

            modelBuilder.Entity("HashtagMagicItem", b =>
                {
                    b.HasOne("DNDCatalog.Core.HashtagAggregate.Hashtag", null)
                        .WithMany()
                        .HasForeignKey("HashtagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNDCatalog.Core.MagicItemAggregate.MagicItem", null)
                        .WithMany()
                        .HasForeignKey("MagicItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpellSpellTag", b =>
                {
                    b.HasOne("DNDCatalog.Core.SpellAggregate.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DNDCatalog.Core.SpellAggregate.SpellTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DNDCatalog.Core.ClassAggregate.Class", b =>
                {
                    b.Navigation("Archetypes");
                });
#pragma warning restore 612, 618
        }
    }
}
